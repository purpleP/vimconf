filetype on
filetype plugin indent on
syntax enable

set autowriteall
set backspace=indent,eol,start
set breakindent
set completeopt=menuone,preview
set foldlevel=99
set foldmethod=indent
set lazyredraw
set mouse-=a
set number
set path+=**
set relativenumber
set shortmess+=A
set signcolumn=no
set smartcase
set splitbelow
set splitright
set termguicolors
set virtualedit=insert
set wildcharm=<TAB>
set wildignore+=*.pyc,*.so,*.swp,*.zip,.*/**
set wildmenu
set winminheight=0

if !has('nvim')
    set encoding=utf-8
    set hlsearch
    set incsearch
endif

if executable('ag')
    set grepprg=grep\ -rIHnP\ --exclude-dir='.*'
endif

if has("persistent_undo")
    set undodir=~/.undodir/
    set undofile
endif

if has('nvim')
    set inccommand=nosplit
endif

silent! colorscheme solarized

let mapleader = "\<Space>"
nnoremap <silent> <leader>* :let @/ = '\<' . expand('<cword>') . '\>' <bar> set hlsearch<CR>
nnoremap <TAB> <C-w>w
nnoremap <S-TAB> <C-w>p
nnoremap <C-L> 20zl
nnoremap <C-H> 20zh

cmap w!! w !sudo tee % >/dev/null

augroup myvimrc
    au!
    au BufWritePost .vimrc source $MYVIMRC
    au BufWritePost vimrc source $MYVIMRC
    au BufEnter .vimrc set ft=vim
augroup END

let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_delay=50

fu! g:DeniteInit()
    call denite#custom#source(
        \ 'file_rec', 'matchers', ['matcher_fuzzy', 'matcher_project_files'])
    call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
    call denite#custom#map('insert',  '<C-p>',  '<denite:move_to_previous_line>',  'noremap')
    call denite#custom#map('insert', '<DOWN>', '<denite:move_to_next_line>', 'noremap')
    call denite#custom#map('insert',  '<UP>',  '<denite:move_to_previous_line>',  'noremap')
    let cmd = 'find -L :directory -type d -path */.* -prune -o -type f -print -type l -print'
    call denite#custom#var('file_rec', 'command', split(cmd))
    call denite#custom#source('grep', 'matchers', ['matcher_fuzzy'])
    call denite#custom#var('grep', 'default_opts', ['-Hn', '--exclude-dir=.*'])
	call denite#custom#var('grep', 'pattern_opt', ['-P'])
    call denite#custom#var('grep', 'final_opts', [':directory'])
endfu

nnoremap <silent> <Esc>f :Denite file_rec<CR>
nnoremap <silent> <Esc>b :Denite buffer<CR>

augroup SmartNumbers
    au!
    au BufEnter,WinEnter * if &buftype == '' | set number | set relativenumber | endif
    au BufLeave,WinLeave * set norelativenumber
    au FocusLost * set norelativenumber
    au FocusGained * if &buftype == '' | set relativenumber | endif
augroup END

set ts=4 sts=4 sw=4 expandtab
augroup indent
    au!
    au FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
    au FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
    au FileType html setlocal ts=2 sts=2 sw=2 expandtab
    au FileType json setlocal ts=2 sts=2 sw=2 expandtab
    au FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
    au FileType css setlocal ts=2 sts=2 sw=2 expandtab
augroup END

fun! MaximizeOrEqualize()
    if &columns < 170
        wincmd |
        wincmd _
    else
        wincmd =
    endif
endf

fun! MaximizeOrNothing()
    if &columns < 170
        wincmd |
        wincmd _
    endif
endf

augroup Resize
    autocmd!
    au VimResized * call MaximizeOrEqualize()
    au WinEnter * call MaximizeOrNothing()
augroup END

augroup ColorColumn
    au!
    autocmd WinEnter,BufEnter *.py\|*.vim\|*vimrc call matchadd('ColorColumn', '\%81v', 100)
augroup END

let g:python3_host_prog = $HOME.'/.venv/bin/python'

noremap <expr> <Plug>(StopHL) execute('nohlsearch')[-1]
noremap! <expr> <Plug>(StopHL) execute('nohlsearch')[-1]

augroup AutoWrite
    au!
    au BufWritePre * call system('mkdir -p '.shellescape(expand('%:p:h')))
    au CursorHold * checktime
    au FocusLost * silent! wall
    au FocusGained * if &buftype == '' | checktime | endif
augroup END

let g:last_insert_layout = system('keyboard_layout')
fu! SaveLayoutAndSwitch()
    let g:last_insert_layout = system('keyboard_layout')
    silent! !keyboard_layout 0
endfu

augroup Language
    au!
    au InsertEnter * silent! exe '!keyboard_layout ' . g:last_insert_layout
    au InsertLeave * call SaveLayoutAndSwitch()
augroup END

set statusline=%f\ %m\ %h\ %r\ %{winnr()}\%=%l:%v/%L\ %p%%
augroup StatusLine
    au!
    au WinEnter,WinLeave,WinNew * redrawstatus!
augroup END

inoremap <silent> <expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <silent> <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"

augroup UltSnipsOnDemand
    au!
    au FileType * if filereadable($HOME . '/.vim/UltiSnips/' . &ft . '.snippets') | packadd ultisnips  | call autocomplete#setup_mappings()| endif
augroup END

cnoremap <expr> <Tab> index(['/', '?'], getcmdtype()) == -1 ?  "<TAB>":"<C-G>" 
cnoremap <expr> <S-Tab> index(['/', '?'], getcmdtype()) == -1 ? "<S-TAB>": "<C-T>" 

fu! s:Inline()
    normal diw
    call search(@" . ' = ', 'bs')
    normal 2w
    normal D
    normal "_dd
    execute "normal \<C-o>"
    normal p
endfu

nnoremap <Leader>i :call <SID>Inline()<CR>

augroup RestoreCursor
    au!
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END
