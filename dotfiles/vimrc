set nocompatible              " be iMproved, required
filetype on
filetype plugin indent on    " required

set autowriteall
set breakindent
set backspace=indent,eol,start
set completeopt=menuone,preview
set foldlevel=99
set foldmethod=indent
set lazyredraw
set mouse-=a
set number
set path+=**
set relativenumber
set ruler
set shortmess+=A
set smartcase
set splitbelow
set splitright
set virtualedit=insert
set wildignore+=*.pyc,*.so,*.swp,*.zip,.*/**
set wildmenu

if !has('nvim')
    set encoding=utf-8
    set hlsearch
    set incsearch
endif

if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor\ --vimgrep
endif

if has("persistent_undo")
    set undodir=~/.undodir/
    set undofile
endif

if has('nvim')
    set inccommand=nosplit
endif

syntax enable
silent! colorscheme solarized

let delimitMate_jump_expansion = 0
let delimitMate_expand_space = 1
let delimitMate_expand_cr = 1

let mapleader = "\<Space>"
inoremap <C-l> <right>
nnoremap <silent> <TAB> :noh<CR>
nnoremap <silent> <leader>* :let @/='\<'.expand('<cword>').'\>' <bar> set hlsearch<CR>
nnoremap <C-L> 20zl
nnoremap <C-H> 20zh

cmap w!! w !sudo tee % >/dev/null

augroup myvimrc
    au!
    au BufWritePost .vimrc source $MYVIMRC
    au BufWritePost vimrc source $MYVIMRC
    au BufEnter .vimrc set ft=vim
augroup END

let g:UltiSnipsEditSplit='horizontal'
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_delay=50
let g:deoplete#sources#clang#libclang_path = $LIBCLANG_PATH
let g:deoplete#sources#clang#clang_header = $LIBCLANG_HEADER

fu! g:DeniteInit()
    call denite#custom#source(
        \ 'file_rec', 'matchers', ['matcher_fuzzy', 'matcher_project_files'])
    call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
    call denite#custom#map('insert',  '<C-p>',  '<denite:move_to_previous_line>',  'noremap')
    call denite#custom#alias('source', 'file_rec/git', 'file_rec')
    call denite#custom#var('file_rec/git', 'command', ['git', 'ls-files', '-co', '--exclude-standard'])
    let cmd = 'find -L :directory -type d -path */.* -prune -o -type f -print -type l -print'
    call denite#custom#var('file_rec', 'command', split(cmd))
endfu

fu! g:GitOrFind()
    exe "Denite `finddir('.git', ';') != '' ? 'file_rec/git': 'file_rec'`"
endfu

nnoremap <silent> <Esc>f :call GitOrFind()<CR>
nnoremap <silent> <Esc>b :Denite buffer<CR>

augroup SmartNumbers
    au!
    au BufEnter,WinEnter * set number | set relativenumber
    au BufLeave,WinLeave * set norelativenumber
    au FocusLost * set norelativenumber
    au FocusGained * set relativenumber
augroup END

set ts=4 sts=4 sw=4 expandtab
augroup indent
    au!
    au FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
    au FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
    au FileType html setlocal ts=2 sts=2 sw=2 expandtab
    au FileType json setlocal ts=2 sts=2 sw=2 expandtab
    au FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
    au FileType css setlocal ts=2 sts=2 sw=2 expandtab
augroup END

fun! MaximizeOrEqualize()
    if &columns < 170
        wincmd |
        wincmd _
    else
        wincmd =
    endif
endf

fun! MaximizeOrNothing()
    if &columns < 170
        wincmd |
    endif
endf

augroup Resize
    autocmd!
    au VimResized * call MaximizeOrEqualize()
    au WinEnter * call MaximizeOrNothing()
augroup END

let g:SuperTabDefaultCompletionType = "<c-n>"

augroup ColorColumn
    au!
    autocmd WinEnter,BufEnter *.py\|*.vim\|*vimrc call matchadd('ColorColumn', '\%81v', 100)
augroup END

let g:python3_host_prog = $HOME.'/.venv/bin/python'
let g:jedi#auto_initialization = 0
let g:jedi#force_py_version = 3
let g:jedi#popup_on_dot = 0
let g:jedi#popup_select_first = 0
let g:jedi#completions_enabled = 0
let g:jedi#smart_auto_mappings = 0

noremap <expr> <Plug>(StopHL) execute('nohlsearch')[-1]
noremap! <expr> <Plug>(StopHL) execute('nohlsearch')[-1]

let s:previous_search_pattern = ''
let s:prev_search_disabled = 0

fu! HlSearch()
    let last_search_pattern = @/
    let new_search = last_search_pattern != s:previous_search_pattern 
    if new_search
       let s:prev_search_disabled = 0
    endif
    if new_search || s:prev_search_disabled == 0
        if v:hlsearch
            silent! if v:hlsearch && !search('\%#\zs'.@/,'cnW')
                call StopHL()
            endif
        endif
    endif
endfu

fu! StopHL()
    if !v:hlsearch || mode() isnot 'n'
        return
    else
        sil call feedkeys("\<Plug>(StopHL)", 'm')
        let s:prev_search_disabled = 1
    endif
endfu

augroup SearchHighlight
    au!
    au CursorMoved * call HlSearch()
    au InsertEnter * call StopHL()
augroup END

augroup AutoWrite
    au!
    au BufLeave * silent! wall
    au TabLeave * silent! wall
    au FocusLost * silent! wall
    au FocusGained * checktime
augroup END

let g:last_insert_layout = system('keyboard_layout')
fu! SaveLayoutAndSwitch()
    let g:last_insert_layout = system('keyboard_layout')
    silent! !keyboard_layout 0
endfu

augroup Language
    au!
    au InsertEnter * silent! exe '!keyboard_layout ' . g:last_insert_layout
    au InsertLeave * call SaveLayoutAndSwitch()
augroup END

set statusline=%f\ %m\ %h\ %r\ %{winnr()}\%=%l.%v/%L\ %p%%
augroup StatusLine
    au!
    au WinEnter,WinLeave,WinNew * redrawstatus!
augroup END
